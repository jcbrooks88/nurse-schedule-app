generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(NURSE)
  createdAt DateTime @default(now())

  // Relations
  createdShifts  Shift[]        @relation("UserCreatedShifts")
  assignedShifts Shift[]        @relation("UserAssignedShifts")
  shiftRequests  ShiftRequest[]
  proposedSwaps  ShiftSwap[]    @relation("Proposer")
  availabilities Availability[]
}

model Shift {
  id          String      @id @default(uuid())
  title       String
  description String?
  start       DateTime
  end         DateTime
  status      ShiftStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  createdBy   User   @relation("UserCreatedShifts", fields: [createdById], references: [id])
  createdById String

  assignedTo   User?   @relation("UserAssignedShifts", fields: [assignedToId], references: [id])
  assignedToId String?

  shiftRequests ShiftRequest[]
  fromSwaps     ShiftSwap[]    @relation("FromShift")
  toSwaps       ShiftSwap[]    @relation("ToShift")
}

model ShiftRequest {
  id      String @id @default(uuid())
  shift   Shift  @relation(fields: [shiftId], references: [id])
  shiftId String

  requester   User   @relation(fields: [requesterId], references: [id])
  requesterId String

  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
}

model ShiftSwap {
  id          String @id @default(uuid())
  fromShift   Shift  @relation("FromShift", fields: [fromShiftId], references: [id])
  fromShiftId String

  toShift   Shift  @relation("ToShift", fields: [toShiftId], references: [id])
  toShiftId String

  proposer   User   @relation("Proposer", fields: [proposerId], references: [id])
  proposerId String

  status    SwapStatus @default(PENDING)
  createdAt DateTime   @default(now())
}

model Availability {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, date]) // Prevent duplicate availability entries for same user/date
}

enum Role {
  NURSE
  ADMIN
}

enum ShiftStatus {
  PENDING
  CONFIRMED
  APPROVED
  SWAPPED
  CANCELLED
  OPEN
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CONFIRMED
  SWAPPED
}

enum SwapStatus {
  PENDING
  ACCEPTED
  DECLINED
  CONFIRMED
  SWAPPED
}
